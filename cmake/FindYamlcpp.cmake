#set (YAMLCPP_FOUND "NO")
message(STATUS "Searching yamlcpp library in LD_LIBRARY_PATH ")  
INCLUDE(CheckIncludeFileCXX)

find_path(YAMLCPP_INC_DIR yaml.h HINTS ENV LD_LIBRARY_PATH PATH_SUFFIXES "../include/yaml-cpp" "../../include/yaml-cpp" NO_DEFAULT_PATH)
find_path(YAMLCPP_INC_DIR yaml.h HINTS ENV LD_LIBRARY_PATH PATH_SUFFIXES "../include/yaml-cpp" "../../include/yaml-cpp" )
find_library(YAMLCPP_LIBRARIES NAMES yaml-cpp HINTS ENV LD_LIBRARY_PATH NO_DEFAULT_PATH)
find_library(YAMLCPP_LIBRARIES NAMES yaml-cpp HINTS ENV LD_LIBRARY_PATH)
message(STATUS "YAMLCPP_INC_DIR=${YAMLCPP_INC_DIR}")
# check deprecated header to figure out whether we have yaml-cpp 0.3 or 0.5
if(EXISTS "${YAMLCPP_INC_DIR}/aliasmanager.h")
  set(HAVE_YAMLCPP05 "NO" CACHE BOOL "Whether yamlcpp is 05 or 03")
else()
  set(HAVE_YAMLCPP05 "YES" CACHE BOOL  "Whether yamlcpp is 05 or 03" )
  find_file(YAMLCPP_NODE_PTR_H ptr.h HINTS "${YAMLCPP_INC_DIR}" PATH_SUFFIXES "./node/" NO_DEFAULT_PATH )
  file(STRINGS ${YAMLCPP_NODE_PTR_H} USES_BOOST REGEX ".include.*boost")
  if("${USES_BOOST}" STREQUAL "")
    set(BOOST_NEEDED "NO")
  else()
    set(BOOST_NEEDED "YES")
  endif()
  message(STATUS "  USES_BOOST= ${USES_BOOST}")
endif()
CHECK_INCLUDE_FILE_CXX("${YAMLCPP_INC_DIR}/aliasmanager.h" HAVE_YAMLCPP03)
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/src/config-yamlcpp.h.in ${CMAKE_CURRENT_BINARY_DIR}/config-yamlcpp.h)

get_filename_component(YAMLCPP_ABS_INC_DIR "${YAMLCPP_INC_DIR}" ABSOLUTE)
get_filename_component(YAMLCPP_ABS_INC_DIR "${YAMLCPP_ABS_INC_DIR}" DIRECTORY)
message(STATUS "absolute path for YAMLCPP include path= ${YAMLCPP_ABS_INC_DIR} HAVE_YAMLCPP05=${HAVE_YAMLCPP05}")
set(YAMLCPP_INCLUDE_DIR "${YAMLCPP_ABS_INC_DIR}" CACHE PATH "yamlcpp include path")
get_filename_component(YAMLCPP_LIBRARY_DIRS "${YAMLCPP_LIBRARIES}" PATH)
if(${BOOST_NEEDED})
  find_package(Boost)
  if(Boost_FOUND)
    set(YAMLCPP_INCLUDE_DIRS ${YAMLCPP_INCLUDE_DIR} ${Boost_INCLUDE_DIRS})
  endif()
else()
    set(YAMLCPP_INCLUDE_DIRS ${YAMLCPP_INCLUDE_DIR})    
endif()
# handle the QUIETLY and REQUIRED arguments and set YAMLCPP_FOUND to TRUE if
# all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
unset(YAMLCPP_INC_DIR CACHE)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(Yamlcpp DEFAULT_MSG YAMLCPP_INCLUDE_DIRS YAMLCPP_LIBRARIES YAMLCPP_LIBRARY_DIRS)
mark_as_advanced(YAMLCPP_FOUND YAMLCPP_INCLUDE_DIRS YAMLCPP_LIBRARIES HAVE_YAMLCPP05 )
